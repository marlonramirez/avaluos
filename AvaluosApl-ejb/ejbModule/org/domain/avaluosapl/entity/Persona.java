package org.domain.avaluosapl.entity;

// Generated 14/03/2015 10:40:33 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Persona generated by hbm2java
 */
@Entity
@Table(name = "persona", catalog = "db_acinversiones", uniqueConstraints = {
		@UniqueConstraint(columnNames = { "num_doc", "id_tipo_doc_per" }),
		@UniqueConstraint(columnNames = "email") })
public class Persona implements java.io.Serializable {

	private Integer idPersona;
	private TipoDoc tipoDoc;
	private String numDoc;
	private String nombres;
	private String apellidos;
	private String email;
	private Set<Telefono> telefonos = new HashSet<Telefono>(0);
	private Cliente cliente;
	private Usuario usuario;
	private Colaborador colaborador;
	private Set<Direccion> direccions = new HashSet<Direccion>(0);

	public Persona() {
	}

	public Persona(TipoDoc tipoDoc, String nombres, String apellidos,
			String email) {
		this.tipoDoc = tipoDoc;
		this.nombres = nombres;
		this.apellidos = apellidos;
		this.email = email;
	}

	public Persona(TipoDoc tipoDoc, String numDoc, String nombres,
			String apellidos, String email, Set<Telefono> telefonos,
			Cliente cliente, Usuario usuario, Colaborador colaborador,
			Set<Direccion> direccions) {
		this.tipoDoc = tipoDoc;
		this.numDoc = numDoc;
		this.nombres = nombres;
		this.apellidos = apellidos;
		this.email = email;
		this.telefonos = telefonos;
		this.cliente = cliente;
		this.usuario = usuario;
		this.colaborador = colaborador;
		this.direccions = direccions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id_persona", unique = true, nullable = false)
	public Integer getIdPersona() {
		return this.idPersona;
	}

	public void setIdPersona(Integer idPersona) {
		this.idPersona = idPersona;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_tipo_doc_per", nullable = false)
	@NotNull
	public TipoDoc getTipoDoc() {
		return this.tipoDoc;
	}

	public void setTipoDoc(TipoDoc tipoDoc) {
		this.tipoDoc = tipoDoc;
	}

	@Column(name = "num_doc", length = 25)
	@Length(max = 25)
	public String getNumDoc() {
		return this.numDoc;
	}

	public void setNumDoc(String numDoc) {
		this.numDoc = numDoc;
	}

	@Column(name = "nombres", nullable = false, length = 120)
	@NotNull
	@Length(max = 120)
	public String getNombres() {
		return this.nombres;
	}

	public void setNombres(String nombres) {
		this.nombres = nombres;
	}

	@Column(name = "apellidos", nullable = false, length = 120)
	@NotNull
	@Length(max = 120)
	public String getApellidos() {
		return this.apellidos;
	}

	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}

	@Column(name = "email", unique = true, nullable = false, length = 250)
	@NotNull
	@Length(max = 250)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "persona")
	public Set<Telefono> getTelefonos() {
		return this.telefonos;
	}

	public void setTelefonos(Set<Telefono> telefonos) {
		this.telefonos = telefonos;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "persona")
	public Cliente getCliente() {
		return this.cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "persona")
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "persona")
	public Colaborador getColaborador() {
		return this.colaborador;
	}

	public void setColaborador(Colaborador colaborador) {
		this.colaborador = colaborador;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "persona")
	public Set<Direccion> getDireccions() {
		return this.direccions;
	}

	public void setDireccions(Set<Direccion> direccions) {
		this.direccions = direccions;
	}

}
